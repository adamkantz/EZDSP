/*
    == SOUL example code ==
    == Author: Oli Larkin ==
*/

/// Title: Complex resonator example.
/// This example uses the complex_resonator filter for synthesis of resonant modes.

processor Values (const float32[] vals)
{
    output event float32 out[vals.size];

    void run()
    {
        for (wrap<vals.size> i)
            out[i] << vals[i];

        advance();
    }
}

//==============================================================================
graph Resonator [[main]]
{
    input stream float32 in;
    output stream float32 out;

    input smoothedGain.volume;

    namespace complex_resonator = soul::filters::complex_resonator;

    let
    {
        modes  = complex_resonator::Processor[3];
        freqs  = Values (float32[] (600.0f, 1200.0f, 2400.0f ));
        gains  = Values (float32[] (1.0f,   0.5f,    0.3f    ));
        decays = Values (float32[] (1.0f,   0.5f,    0.1f    ));
        smoothedGain = soul::gain::SmoothedGain;
    }

    connection
    {
        gains.out -> modes.gainIn;
        freqs.out -> modes.frequencyIn;
        decays.out -> modes.decayIn;
        in -> modes.in;
        modes.realOut -> smoothedGain.in;
        smoothedGain.out -> out;
    }
}

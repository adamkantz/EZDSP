/*
    == SOUL example code ==
    == Author: Oli Larkin ==
*/

/** Title: SOS Cascade Processor Example

    This example demonstrates the sos_cascade Processor, which can take a list of filter
    coefficients as an argument at compile time and cascade enough biquad second-order-sections
    to realise the filter.

    The list of coefficients can be generated by filter design software. This can be useful for
    example to generate high order Elliptic and Chebychev filters with precise characteristics.
    Sometimes a little text editing is required to get the coefficients in the right format.

    Examples are provided for three filter design tools, showing how to create a 4th order
    butterworth filter, with a 1000Hz cutoff frequency.

    =================================================================================

    #### Python3 + scipy example:

    https://www.python.org
    https://www.scipy.org

    ```python
    from scipy.signal import sosfiltfilt, butter

    f0 = 1000
    fs = 44100

    sos = butter(4, f0/(fs/2), btype='low', output='sos')
    for i in sos:
        for j in i:
            print(str(j) + ",")
    ```

    =================================================================================

    #### Octave + signal package (also similar with Matlab)

    https://www.gnu.org/software/octave

    - First install octave
    - Then install the control and signal packages:
      ```
      pkg install -forge control
      pkg install -forge signal
      ```
    - Then type the following in the octave terminal to get the coefficients
      ```
      pkg load signal

      f0 = 1000
      fs = 44100
      [b, a] = butter(4, f0 / (fs / 2));
      output_precision(12);
      sos = tf2sos(b, a)
      ```
    - Manually form a comma-separated list of 6 coefficients for each SOS.

    =================================================================================

    #### Micromodeler

    https://micromodeler.com/dsp/

    - Create a new file
    - Drag a butterworth filter into the GUI
    - Drag the data export section into the GUI
    - Set the "Start Frequency" to 1000/44100 = 0.022675736961451 * fs
    - Choose biquad format: b0, b1, b2, a1, a2 in the "Coefficient Export" section
    - Select "Code" tab from "Structure/Code" pane;
    - Click "Select practical coefficients" to copy to clipboard
    - Manually insert missing a0 coefficients (1.0)
    - Manually negate the a1 and a2 coefficients (make negative values positive and vice versa)
    - Form a comma separated list of 6 coefficients for each SOS
*/

graph SOSCascadeTester [[ main ]]
{
    // input stream float32 in;
    output stream float32 out;

    namespace sos_cascade = soul::filters::sos_cascade;

    let
    {
        sourceSignal = soul::noise::Pink;

        filter = sos_cascade::Processor (float64[] (

            // python:
            2.1520951214109304e-05, 4.304190242821861e-05, 2.1520951214109304e-05, 1.0, -1.7501415049742755,0.7680563844159684,
            1.0, 2.0, 1.0, 1.0, -1.8777026972159967, 0.8969233244352001

            // octave:
            //2.15209512141e-05, 4.30419017064e-05, 2.15209515257e-05, 1.00000000000e+00, -1.75014150497e+00, 7.68056384416e-01
            //1.00000000000e+00, 2.00000003354e+00, 9.99999985522e-01, 1.00000000000e+00, -1.87770269722e+00, 8.96923324435e-01

            // micromodeler:
            // 0.005509363510811743, 0.011018727021623487, 0.005509363510811743, 1.0, -1.7501415049742786, 0.768056384415971,
            // 0.00390625, 0.0078125, 0.00390625, 1.0, -1.8777026972159985, 0.8969233244352014
        ));
    }

    connection
    {
        sourceSignal -> filter.in;
        filter.out -> out;
    }
}

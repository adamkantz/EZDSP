/*
    == SOUL example code ==
    == Author: Cesare Ferrari ==
*/

/// Title: TX81Z emulator
///
/// This is a fairly complete implementation of a TX81Z, the limitations are:
///
///  1) No LFO
///  2) Sensitivity - missing PMod, AMS and EBS
///  3) No detune - you can emulate by adding a fixed component to an oscillator
///  4) Envelopes - no shift
///  5) Scaling - no level scaling


//==============================================================================
graph ElectroPiano  [[ main ]]
{
    input midiParser.parseMIDI midiIn;
    output stream float audioOut;

    let
    {
        voices         = ElectroPianoVoice[8];
        midiParser     = soul::midi::MPEParser;
        filter         = TX81Z::OutputFilter;
        voiceAllocator = TX81Z::PolyVoiceAllocator (-12, 8);
    }

    connection
    {
        midiParser -> voiceAllocator -> voices -> filter -> audioOut;
    }
}

//==============================================================================
graph ElectroPianoVoice
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff,
                 soul::note_events::PitchBend) eventIn;

    output stream float audioOut;

    let
    {
        // Oscillator Parameters -        Waveshape, Volume, Freq(fixed), Freq (multiplier), Feedback
        osc1         = TX81Z::Oscillator (        1,     99,        0.0f,              1.0f,        0);
        osc2         = TX81Z::Oscillator (        1,     84,        1.0f,              1.0f,        0);
        osc3         = TX81Z::Oscillator (        1,     99,        1.0f,              1.0f,        0);
        osc4         = TX81Z::Oscillator (        1,     54,       -1.0f,             14.0f,        0);

        // Envelope Parameters -                A, D1R, D1L, D2R,  R, KVS, Rate Scaling
        amplitudeEnvelope1  = TX81Z::Envelope (24,   4,  13,   3,  6,   3,            2);
        amplitudeEnvelope2  = TX81Z::Envelope (31,   4,  13,   3,  4,   3,            2);
        amplitudeEnvelope3  = TX81Z::Envelope (31,  13,  12,   8,  7,   4,            1);
        amplitudeEnvelope4  = TX81Z::Envelope (31,   6,  12,   4,  7,   4,            2);
    }

    connection
    {
        eventIn  -> osc1.eventIn,
                    osc2.eventIn,
                    osc3.eventIn,
                    osc4.eventIn,
                    amplitudeEnvelope1,
                    amplitudeEnvelope2,
                    amplitudeEnvelope3,
                    amplitudeEnvelope4;

        amplitudeEnvelope1 -> osc1.amplitudeIn;
        amplitudeEnvelope2 -> osc2.amplitudeIn;
        amplitudeEnvelope3 -> osc3.amplitudeIn;
        amplitudeEnvelope4 -> osc4.amplitudeIn;

        osc4 -> osc3.modulatorIn;
        osc3 -> audioOut;
        osc2 -> osc1.modulatorIn;
        osc1 -> audioOut;
    }
}

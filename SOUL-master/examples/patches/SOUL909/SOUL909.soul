/*
    == SOUL example code ==
    == Author: Jules ==
*/

/// Title: A tribute to the classic 909 drum machine
///
/// This uses a single sample containing the whole kit, and then plays
/// subsections of it for each drum hit. We could equally have chopped it
/// up into separate wave files and loaded each one separately.
///
/// In memory of Philip Meehan, who created these drum samples for use in
/// the early Tracktion demo songs, back in around 2001.

graph SOUL909  [[ main ]]
{
    input smoothedGain.volume        volume   [[ name: "Volume", min: -40, max: 0, init: -6, step: 1 ]];
    input event soul::midi::Message  midiIn;
    output stream float<2>           audioOut;

    let
    {
        voices          = DrumHitPlayer[8];
        smoothedGain    = soul::gain::SmoothedGainParameter (0.5f);
        gainProcessor   = soul::gain::DynamicGain (float<2>);
    }

    connection
    {
        midiIn -> soul::midi::MPEParser -> soul::voice_allocators::Basic(8) -> voices -> gainProcessor.in;
        smoothedGain.gain -> gainProcessor.gain;
        gainProcessor -> audioOut;
    }
}

//==============================================================================
processor DrumHitPlayer
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) eventIn;

    output stream float<2> audioOut;

    struct DrumHit
    {
        int startNote, endNote;
        float64 startTimeSeconds, lengthSeconds;
        float gaindB, pan;
    }

    external soul::audio_samples::Mono drumkit;
    external DrumHit[] drumhits;

    float64 playbackPosition, positionIncrement, playbackEndPosition;
    float<2> gain;

    event eventIn (soul::note_events::NoteOn e)
    {
        let targetNote = int (e.note);

        for (int i  = 0; i < drumhits.size; ++i)
        {
            let hit = drumhits.at(i);

            if (targetNote >= hit.startNote && targetNote <= hit.endNote)
            {
                let sampleRate = drumkit.sampleRate;
                playbackPosition = sampleRate * hit.startTimeSeconds;
                playbackEndPosition = min (playbackPosition + sampleRate * hit.lengthSeconds, float64 (drumkit.frames.size));
                positionIncrement = sampleRate / processor.frequency;
                gain = e.velocity * soul::dBtoGain (hit.gaindB) * soul::pan_law::centre3dB (hit.pan);
                break;
            }
        }
    }

    event eventIn (soul::note_events::NoteOff e) {}

    void run()
    {
        loop
        {
            if (positionIncrement > 0)
            {
                audioOut << gain * drumkit.frames.readLinearInterpolated (playbackPosition);

                playbackPosition += positionIncrement;

                if (playbackPosition >= playbackEndPosition)
                    positionIncrement = 0;
            }

            advance();
        }
    }
}

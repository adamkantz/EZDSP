/*
    == SOUL example code ==
    == Author: Jules ==
*/

/// Title: Minimum-Viable-Piano
///
/// You probably won't want to use this patch to replace your Bosendorfer,
/// but it shows how to play some re-pitched external sample data, and
/// it'll do a pretty good job of recreating some early 1990s rave piano.
///
/// In memory of Philip Meehan, who recorded these piano samples for use in
/// the early Tracktion demo songs, back in around 2001.


//==============================================================================
graph Piano  [[ main ]]
{
    input event float volume [[ min: -40, max: 0,  init: -6, unit: "dB", step: 1, name: "Volume" ]];
    input event soul::midi::Message midiIn;
    output stream float audioOut;

    let
    {
        voices          = Voice[8];
        masterVolume    = soul::gain::DynamicGain (float);
    }

    connection
    {
        midiIn -> soul::midi::MPEParser -> soul::voice_allocators::Basic(8) -> voices -> masterVolume.in;
        volume -> GainParameterRamp (1.0f) -> masterVolume.gain;
        masterVolume -> audioOut;
    }
}

//==============================================================================
processor PianoSamplePlayer
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) eventIn;

    output stream float audioOut;

    external soul::audio_samples::Mono  piano_C5,
                                        piano_G5,
                                        piano_C6,
                                        piano_G6;

    struct Sample
    {
        soul::audio_samples::Mono audioData;
        int rootNote;
    }

    Sample[4] samples;

    float[] sourceFrames;
    float64 playbackPosition, positionIncrement;

    event eventIn (soul::note_events::NoteOn e)
    {
        let sample = findBestSampleForNote (int (e.note));
        sourceFrames = sample.audioData.frames;
        positionIncrement = soul::getSpeedRatioForPitchedSample (sample.audioData.sampleRate,
                                                                 float (sample.rootNote),
                                                                 processor.frequency, e.note);
        playbackPosition = 0;
    }

    event eventIn (soul::note_events::NoteOff e)  {}

    void initialiseSamples()
    {
        samples = ((piano_C5, 72),
                   (piano_G5, 79),
                   (piano_C6, 84),
                   (piano_G6, 91));
    }

    Sample findBestSampleForNote (int targetNote)
    {
        int bestDistance = 128;
        wrap<samples.size> bestIndex;

        for (wrap<samples.size> i)
        {
            let distance = abs (samples[i].rootNote - targetNote);

            if (distance < bestDistance)
            {
                bestDistance = distance;
                bestIndex = i;
            }
        }

        return samples[bestIndex];
    }

    void run()
    {
        initialiseSamples();

        loop
        {
            if (positionIncrement > 0)
            {
                audioOut << sourceFrames.readLinearInterpolated (playbackPosition);

                playbackPosition += positionIncrement;

                if (playbackPosition >= sourceFrames.size)
                    positionIncrement = 0;  // stop at the end of the sample
            }

            advance();
        }
    }
}

//==============================================================================
graph Voice
{
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) eventIn;

    output stream float audioOut;

    let
    {
        samplePlayer = PianoSamplePlayer;
        envelope = soul::envelope::FixedAttackReleaseEnvelope (1.0f, 0.0f, 0.3f);
        attenuator = soul::gain::DynamicGain (float);
    }

    connection
    {
        eventIn -> samplePlayer.eventIn,
                   envelope.noteIn;

        samplePlayer.audioOut  -> attenuator.in;
        envelope.levelOut      -> attenuator.gain;

        attenuator -> audioOut;
    }
}

//==============================================================================
// Converts an input event (as a gain in db) to a ramped stream
processor GainParameterRamp (float slewRate)
{
    input event float gainDb;
    output stream float parameterOut;

    event gainDb (float targetDb)
    {
        targetValue = soul::dBtoGain (targetDb);

        let diff = targetValue - currentValue;
        let rampSeconds = abs (diff) / slewRate;

        rampSamples   = int (processor.frequency * rampSeconds);
        rampIncrement = diff / float (rampSamples);
    }

    float targetValue;
    float currentValue;
    float rampIncrement;
    int rampSamples;

    void run()
    {
        loop
        {
            if (rampSamples > 0)
            {
                currentValue += rampIncrement;
                --rampSamples;
            }

            parameterOut << currentValue;
            advance();
        }
    }
}

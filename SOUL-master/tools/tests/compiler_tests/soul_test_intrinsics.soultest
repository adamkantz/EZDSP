/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

## function

bool near (float32 f1, float32 f2) { return abs (f1 - f2) < 0.00001f; }
bool near (float64 f1, float64 f2) { return abs (f1 - f2) < 0.00000001; }

bool minInt()
{
    return min (1, 2) == 1 &&
           min (-5, 3) == -5 &&
           min (1, min (2, 3)) == 1;
}

bool minFloat()
{
    return min (1.0f, 2.0f) == 1.0f &&
           min (-5.0f, 3.0f) == -5.0f &&
           min (1.0f, min (2.0f, 3.0f)) == 1.0f;
}

bool minDouble()
{
    return min (1.0, 2.0) == 1.0 &&
           min (-5.0, 3.0) == -5.0 &&
           min (1.0, min (2.0, 3.0)) == 1.0;
}

bool maxInt()
{
    return max (1, 2) == 2 &&
           max (-5, 3) == 3 &&
           max (1, max (2, 3)) == 3;
}

bool maxFloat()
{
    return max (1.0f, 2.0f) == 2.0f &&
           max (-5.0f, 3.0f) == 3.0f &&
           max (1.0f, max (2.0f, 3.0f)) == 3.0f;
}

bool maxDouble()
{
    return max (1.0, 2.0) == 2.0 &&
           max (-5.0, 3.0) == 3.0 &&
           max (1.0, max (2.0, 3.0)) == 3.0;
}

bool clampInt()
{
    return
        clamp (5, -4, 4) == 4 &&
        clamp (-10, -4, 4) == -4 &&
        clamp (3, 1, 10) == 3;
}

bool clampFloat()
{
    return
        clamp (5.0f, -4.0f, 4.0f) == 4.0f &&
        clamp (-10.0f, -4.0f, 4.0f) == -4.0f &&
        clamp (3.0f, 1.0f, 10.0f) == 3.0f;
}

bool clampDouble()
{
    return
        clamp (5.0, -4.0, 4.0) == 4.0 &&
        clamp (-10.0, -4.0, 4.0) == -4.0 &&
        clamp (3.0, 1.0, 10.0) == 3.0;
}

bool wrapInt()
{
    return
        wrap (3, 10) == 3 &&
        wrap (10, 10) == 0 &&
        wrap (43, 10) == 3 &&
        wrap (-22, 10) == 8;
}

bool wrapFloat()
{
    return
        wrap (3.0f, 10.0f) == 3.0f &&
        wrap (10.0f, 10.0f) == 0.0f &&
        near (wrap (43.1f, 10.0f), 3.1f) &&
        near (wrap (-22.2f, 10.0f), 7.8f);
}

bool wrapDouble()
{
    return
        wrap (3.0, 10.0) == 3.0 &&
        wrap (10.0, 10.0) == 0.0 &&
        near (wrap (43.1, 10.0), 3.1) &&
        near (wrap (-22.2, 10.0), 7.8);
}

bool abs1()
{
    return  abs (5) == 5 && abs (-23) == 23 &&
            abs (5L) == 5L && abs (-23L) == 23L &&
            abs (5.0f) == 5.0f && abs (-23.5f) == 23.5f &&
            abs (5.0) == 5.0 && abs (-23.5) == 23.5;
}

int32 absWrapper (int32 n)      { return abs (n); }
int64 absWrapper (int64 n)      { return abs (n); }
float32 absWrapper (float32 n)  { return abs (n); }
float64 absWrapper (float64 n)  { return abs (n); }

bool abs2()
{
    return  absWrapper (5) == 5 && absWrapper (-23) == 23 &&
            absWrapper (5L) == 5L && absWrapper (-23L) == 23L &&
            absWrapper (5.0f) == 5.0f && absWrapper (-23.5f) == 23.5f &&
            absWrapper (5.0) == 5.0 && absWrapper (-23.5) == 23.5;
}

bool testClamp()
{
    clamp<10> clamp = clamp (2, 3, 4);
    return clamp == 3;
}

bool testRoundToInt()
{
    return roundToInt (0.75f) == 1
        && roundToInt (0.5f) == 1
        && roundToInt (1.5f) == 2
        && roundToInt (1.1f) == 1
        && roundToInt (0.4f) == 0
        && roundToInt (-0.4f) == 0
        && roundToInt (-0.6f) == -1
        && roundToInt (-1.1f) == -1
        && roundToInt (-1.7f) == -2
        && roundToInt (0.49f) == 0;
}

const float[6] testArray = (0, 1, 2, 3, 4, 5);

bool testLinearInterpolationGeneric<Array> (Array a)
{
    return near (a.readLinearInterpolated (1.1), 1.1f)
        && near (a.readLinearInterpolated (5.1), 4.5f)
        && near (a.readLinearInterpolated (7.1), 1.1f)
        && near (a.readLinearInterpolated (-1.0), 5.0f)
        && near (a.readLinearInterpolated (-0.9), 4.5f)
        && near (a.readLinearInterpolated (-0.1), 0.5f)
        && near (a.readLinearInterpolated (-1.1), 4.9f)
        && near (a.readLinearInterpolated (-7.1), 4.9f);
}

bool testLinearInterpolation()
{
    float[] dynamicArray = testArray;

    return testLinearInterpolationGeneric (testArray)
        && testLinearInterpolationGeneric (dynamicArray);
}

## function

bool near (float f1, float f2)
{
    float iota = 0.0001f;
    return ((f1 - iota) < f2) && ((f1 + iota) > f2);
}

bool vectorSin()
{
    float<4> floatVector = (0.1f, 0.2f, 0.3f, 0.4f);
    let f = floatVector.sin();

    return near (sin (floatVector[0]), f[0]) &&
           near (sin (floatVector[1]), f[1]) &&
           near (sin (floatVector[2]), f[2]) &&
           near (sin (floatVector[3]), f[3]);
}

bool vectorSin2()
{
    float<4> floatVector = (0.1f, 0.2f, 0.3f, 0.4f);
    let f = floatVector.genericSin();

    return near (sin (floatVector[0]), f[0]) &&
           near (sin (floatVector[1]), f[1]) &&
           near (sin (floatVector[2]), f[2]) &&
           near (sin (floatVector[3]), f[3]);
}

bool vectorSqrt()
{
    float<4> floatVector = (1.0f, 4.0f, 9.0f, 16.0f);
    let f = sqrt (floatVector);

    return  near (f[0], 1.0f) &&
            near (f[1], 2.0f) &&
            near (f[2], 3.0f) &&
            near (f[3], 4.0f);
}

bool vectorSqrt2()
{
    float<4> floatVector = (1.0f, 4.0f, 9.0f, 16.0f);
    let f = genericSqrt (floatVector);

    return  near (f[0], 1.0f) &&
            near (f[1], 2.0f) &&
            near (f[2], 3.0f) &&
            near (f[3], 4.0f);
}

T genericSin<T> (T x)
{
    T result;
    wrap<T.size> i;

    loop (T.size)
    {
        result[i] = sin (x[i]);
        i++;
    }

    return result;
}

T genericSqrt<T> (T x)
{
    T result;
    wrap<T.size> i;

    loop (T.size)
    {
        result[i] = sqrt (x[i]);
        i++;
    }

    return result;
}

T.elementType genericMin<T> (T x)
{
    var m = x[0];

    wrap<T.size> i = 1;

    loop (T.size - 1)
    {
        m = min (m, x[i]);
        i++;
    }

    return m;
}

bool arraySin()
{
    float[4] floatVector = (0.1f, 0.2f, 0.3f, 0.4f);
    let f = genericSin (floatVector);

    return near (sin (floatVector[0]), f[0]) &&
           near (sin (floatVector[1]), f[1]) &&
           near (sin (floatVector[2]), f[2]) &&
           near (sin (floatVector[3]), f[3]);
}

bool arraySqrt()
{
    float[4] floatVector = (1.0f, 4.0f, 9.0f, 16.0f);
    let f = genericSqrt (floatVector);

    return  near (f[0], 1.0f) &&
            near (f[1], 2.0f) &&
            near (f[2], 3.0f) &&
            near (f[3], 4.0f);
}

bool arrayMin()
{
    float[4] floatArray = (4.0f, -2.0f, 3.0, -1.5f);
    let f = genericMin(floatArray);
    return near (f, -2.0f);
}

bool vectorMin()
{
    float<4> floatArray = (4.0f, -2.0f, 3.0, -1.5f);
    let f = genericMin(floatArray);
    return near (f, -2.0f);
}

bool lerp()
{
    return near (lerp (20.0f, 30.0f, 0.2f), 22.0f);
}

void foo()
{
    float f1 = 1.0f;
    float f2 = min (f1, f1);
    float f3 = max (f2, f2);
    float f4 = cos (f3);
    float f5 = 1.0f / f4;
}

## error 2:23: error: product() only works with arrays or vectors

void test() { let x = product (2); }

## error 2:23: error: sum() only works with arrays or vectors

void test() { let x = sum (2); }

## error 2:23: error: lerp() only works with scalar floating point types

void test() { let x = lerp (2, 3, 4); }

## error 2:23: error: fmod() only works with scalar floating point types

void test() { let x = fmod (2, 3); }

## error 3:28: error: Failed to instantiate generic function sqrt(A), error: 'primitiveType' can only be applied to a vector or primitive type

struct A { int x; }
bool test() { A a; let x = sqrt (a); return true; }

## error 2:30: error: sqrt() only works with scalar floating point types

bool test() { int a; let x = sqrt (a); return true; }

## error 3:28: error: sin() only works with floating point types

struct A { int x; }
bool test() { A a; let x = sin (a); return true; }

## error 4:5: error: everything working just fine

void test()
{
    static_assert (int.isArray, "everything working just fine");
}

## error 4:5: error: static_assert failed

void test()
{
    static_assert (int.isArray);
}

## error 4:33: error: Expected a string literal error message as the second argument

void test()
{
    static_assert (int.isArray, 1234);
}

## error 4:5: error: Expected 1 or 2 arguments

void test()
{
    static_assert();
}

## function

bool near (float32 f1, float32 f2)  { return abs (f1 - f2) < 0.00001f; }
bool near (float64 f1, float64 f2)  { return abs (f1 - f2) < 0.00000001; }

bool sinCosTan()
{
    let f1 = 0.1f;
    let d1 = 0.2;

    return  near (f1, asin (sin (f1))) &&
            near (f1, acos (cos (f1))) &&
            near (f1, atan (tan (f1))) &&
            near (d1, asin (sin (d1))) &&
            near (d1, acos (cos (d1))) &&
            near (d1, atan (tan (d1)));
}

bool sinCosTanH()
{
    let f1 = 0.1f;
    let d1 = 0.2;

    return  near (f1, asinh (sinh (f1))) &&
            near (f1, acosh (cosh (f1))) &&
            near (f1, atanh (tanh (f1))) &&
            near (d1, asinh (sinh (d1))) &&
            near (d1, acosh (cosh (d1))) &&
            near (d1, atanh (tanh (d1)));
}

bool testMod()
{
    return near (1.5f, fmod (11.5f, 2.0f)) &&
           near (1.5, fmod (11.5, 2.0)) &&
           near (-0.9f, remainder (5.1f, 3.0f)) &&
           near (0.9, remainder (-5.1, 3.0));
}

bool testFloorCeilConstants()
{
    return near (2.0f, floor (2.7f)) &&
           near (3.0f, ceil (2.7f)) &&
           near (-3.0f, floor (-2.7f)) &&
           near (-2.0f, ceil (-2.7f)) &&
           near (-1.0f, floor (-1.0f)) &&
           near (-1.0f, ceil (-1.0f)) &&
           near (1.0f, floor (1.0f)) &&
           near (1.0f, ceil (1.0f));
}

bool testFloorCeil()
{
    var f1 = 2.7f;
    f1 += 0.0f;

    var f2 = -2.7f;
    f2 += 0.0f;

    var f3 = -1.0f;
    f3 += 0.0f;

    var f4 = 1.0f;
    f4 += 0.0f;

    return near (2.0f, floor (f1)) &&
           near (3.0f, ceil (f1)) &&
           near (-3.0f, floor (f2)) &&
           near (-2.0f, ceil (f2)) &&
           near (-1.0f, floor (f3)) &&
           near (-1.0f, ceil (f3)) &&
           near (1.0f, floor (f4)) &&
           near (1.0f, ceil (f4));
}

bool testPow()
{
    return near (8.0f, pow (2.0f, 3.0f)) &&
           near (16.0, pow (4.0, 2.0)) &&
           near (2.0f, pow (8.0f, 1.0f/3.0f));
}

bool testExp()
{
    return near (2.71828f, exp (1.0f)) &&
           near (7.38905609893, exp (2.0));
}

bool testLog10()
{
    return near (3.0f, log10 (1000.0f)) &&
           near (-4.0, log10 (0.0001));
}

bool testAtan2()
{
    return near (0.0f, atan2 (0.0f, 0.0f)) &&
           near (3.14159f, atan2 (0.0f, -0.0f)) &&
           near (1.570796327, atan2 (7.0, 0.0));
}

bool testSmallVectorSum()
{
    let f = float<5> (1.0f, 2.0f, 3.0f, 4.0f, 5.0f);
    return f.sum() == 15.0f;
}

bool testLargeVectorSum()
{
    float<16> f;
    f[0] = 1.0f;
    f[5] = 2.0f;
    f[14] = 3.0f;
    return f.sum() == 6.0f;
}

bool testLargeVectorSum2()
{
    float<17> f;
    f[0] = 1.0f;
    f[5] = 2.0f;
    f[16] = 3.0f;
    return f.sum() == 6.0f;
}

bool testLargeVectorSum3()
{
    float<18> f;
    f[0] = 1.0f;
    f[5] = 2.0f;
    f[16] = 3.0f;
    return f.sum() == 6.0f;
}

bool testSmallArraySum()
{
    float[5] f;
    f[0] = 1.0f;
    f[1] = 2.0f;
    f[2] = 3.0f;
    f[3] = 4.0f;
    f[4] = 5.0f;
    return f.sum() == 15.0f;
}

bool testLargeArraySum()
{
    int[17] f;
    f[0] = 1;
    f[1] = 2;
    f[5] = 3;
    f[11] = 4;
    f[16] = 5;
    return f.sum() == 15;
}

bool testSmallVectorProduct()
{
    let f = int<5> (1, 2, 3, 4, 5);
    return f.product() == 120;
}

bool testLargeVectorProduct()
{
    var f = int<16> (1);
    f[5] = 3;
    f[15] = 3;
    return f.product() == 9;
}

bool testLargeVectorProduct2()
{
    var f = int<17> (1);
    f[5] = 3;
    f[15] = 3;
    return f.product() == 9;
}

bool testLargeArrayProduct()
{
    var f = int[17] (1);
    f[5] = 3;
    f[15] = 3;
    return f.product() == 9;
}

int getDynamicArrayProduct (int[] f)        { return f.product(); }
int getDynamicArraySum (int[] f)            { return f.sum(); }

bool testDynamicIntrinsics()
{
    let f = int[17] (2);
    return getDynamicArrayProduct (f) == 131072
        && getDynamicArraySum (f) == 2 * 17
        && getDynamicArrayProduct (int[]()) == 0
        && getDynamicArraySum (int[]()) == 0;
}

## error 6:20: error: Could not resolve argument types for function call pow(float32, int32)

void test()
{
    let a = 10.0f;
    let sqrtTest1 = sqrt(a);
    let powTest1 = pow(a, 2);
}

## error 6:20: error: Could not resolve argument types for function call pow(float32, int32)

void test()
{
    var b = 20.0f;
    let sqrtTest2 = sqrt(b);
    let powTest2 = pow(b, 2);
}

## error 6:20: error: Could not resolve argument types for function call pow(const float32, int32)

void test()
{
    const float c = 30.0f;
    let sqrtTest3 = sqrt(c);
    let powTest3 = pow(c, 2);
}

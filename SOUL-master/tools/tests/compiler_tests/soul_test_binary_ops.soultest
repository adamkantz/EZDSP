/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

## function

bool test1()
{
    int i = 10;
    int j = 0x10;
    int k = 0b001011;

    return i == 10 && j == 16 && k == 11;
}

bool test2()
{
    return 16 + 4   ==  20
        && 4 + -16  == -12
        && 4 - 16   == -12
        && 4 - -16  ==  20
        && 4 * 16   ==  64
        && 4 * -16  == -64
        && 16 / 4   ==  4
        && -16 / 4  == -4
        && 18 % 4   ==  2;
}

bool test3()
{
    int i  = 2;    i += 4;
    let i1 = i;    i -= 3;
    let i2 = i;    i *= 3;
    let i3 = i;    i /= 2;
    let i4 = i;    i %= 3;
    let i5 = i;

    return i1 == 6 && i2 == 3 && i3 == 9 && i4 == 4 && i5 == 1;
}

bool test4()
{
    return (0x10 & 0x33)      == 16
        && (0x02 | 0x20)      == 34
        && (0x10 ^ 0x33)      == 35
        && ~0x10              == -17
        && (0x10 >> 2)        == 4
        && (-0x10 >> 2)       == -4
        && (0x10 >> -2)       == 0
        && (-0x10 >> -2)      == -1
        && (0x10 << 2)        == 64
        && (-0x10 << 2)       == -64
        && (0x10 << -2)       == 0
        && (-0x10 << -2)      == 0
        && (0x10 >>> 2)       == 4
        && (0x10 >>> -2)      == 0
        && (-0x10 >>> 2)      == 0x3ffffffc
        && (-0x10L >>> 2)     == 0x3ffffffffffffffcL;
}

bool test5()
{
    int i = 0x10;
    i &= 0x33;
    let i1 = i;

    i = 0x02;
    i |= 0x20;
    let i2 = i;

    i = 0x02;
    i ^= 0x22;
    let i3 = i;

    i = 0x02;
    i <<= 2;
    let i4 = i;

    i = -32;
    i >>= 2;
    let i5 = i;

    i = -32;
    i >>>= 2;
    let i6 = i;

    bool b = true;

    b &&= true;
    let b1 = b;
    b &&= false;
    let b2 = b;
    b ||= false;
    let b3 = b;
    b ||= true;
    let b4 = b;

    return i1 == 16 && i2 == 34 && i3 == 32 && i4 == 8 && i5 == -8 && i6 == 1073741816
            && b1 && ! b2 && ! b3 && b4;
}

bool test6()
{
    return (1 == 1)
        && ! (1 != 1)
        && (2 >= 2)
        && ! (2 > 2)
        && ! (2 < 2)
        && (2 <= 2);
}

bool test7()
{
    return bool (1) && bool (2) && ! bool (0) && bool (1.0f) && ! bool();
}

bool test8()
{
    int i = 2;
    i = i - 1;

    int j = 2;
    j = j -1;

    return i == 1 && j == 1;
}

bool ternery1()
{
    var x = 1, y = 2;
    ++x; --x;
    return x < y ? 1 != 2 : 3 == 4;
}

bool ternery2()
{
    let x = 1, y = 2;
    return x < y ? 1 != 2 : 3 == 4;
}

bool ternery3()
{
    var x = 1, y = 2;
    ++x; --x;
    return x > y ? 1 == 2 : 3 != 4;
}

bool ternery4()
{
    var x = 1, y = 2;
    ++x; --x;
    return x < y ? true && true : true && false;
}

bool ternery5()
{
    var x = 1, y = 2;
    ++x; --x;
    return ! (x > y ? true && true : true && false);
}

bool ternery6()
{
    var x = 1, y = 2;
    ++x; --x;
    return x == 1 ? y != 2 ? false : true : false;
}

bool ternery7()
{
    let x = 1, y = 2;
    return x == 1 ? y != 2 ? false : true : false;
}

bool ternery8()
{
    var x = 1, y = 2;
    ++x; --x;
    return x != 1 ? false : y != 2 ? false : true;
}

bool ternery9()
{
    let x = 1, y = 2;
    return x != 1 ? false : y != 2 ? false : true;
}

bool test9()
{
    int i32 = 4;
    const int n1 = ~i32;
    let n2 = ~i32;
    int n3 = ~i32;

    int64 i64 = 4;
    const int64 n4 = ~i64;
    let n5 = ~i64;
    int64 n6 = ~i64;

    return n1 == ~4 && n2 == ~4 && n3 == ~4 && n4 == ~4 && n5 == ~4 && n6 == ~4;
}

bool testOperatorPrecedence()
{
    return (1 + 2 * 3) == 7
        && (1 + 8 / 4) == 3
        && (9 + 7 % 3) == 10
        && (8 == 32 >> 2)
        && (32 >> 2 == 8)
        && (12 * 2 / 4) == 6
        && (3 / 2 * 4) == 4
        && (32 >> 1 >> 1) == 8
        && (true || true && false)
        && (true && false || true)
        && ! ((true || true) && false)
        && (4 - 2 - 1) == 1;
}

bool test10()
{
    int i = 1 + 4 + 128;
    int j = 1 + 8 + 128;

    i += 0;

    return (i & j) == (1 + 128) &&
           (i | j) == (1 + 4 + 8 + 128);
}

bool test11()
{
    int i = 4;
    int j = 5;
    int k = 2;

    k = k + 1;
    k = k - 1;
    k = k * 2;
    k = k / 4;
    k = k % 9;
    k = k >> 1;
    k = k >>> 1;
    k = k << 1;

    k += 1;
    k -= 1;
    k *= 2;
    k /= 1;
    k >>= 1;
    k <<= 2;
    k %= 7;

    {
        const bool b1 = i == 1;
        const bool b2 = i != 1;
        const bool b3 = i > 1;
        const bool b4 = i >= 2;
        const bool b5 = i < 3;
        const bool b6 = i <= 4;
        const bool b7 = (i == 3 || j == 4);
        const bool b8 = (i == 3 && j == 4);
        const bool b9 = (i > 5) ? j == 5 : j == 4;

        const int r1 = i & 1;
        const int r2 = i | 3;
        const int r3 = i ^ 3;
        const int r4 = ~i;
    }

    {
        let b1 = i == 1;
        let b2 = i != 1;
        let b3 = i > 1;
        let b4 = i >= 2;
        let b5 = i < 3;
        let b6 = i <= 4;
        let b7 = (i == 3 || j == 4);
        let b8 = (i == 3 && j == 4);
        let b9 = (i > 5) ? j == 5 : j == 4;

        let r1 = i & 1;
        let r2 = i | 3;
        let r3 = i ^ 3;
        let r4 = ~i;

        return r4 == ~4;
    }
}

bool testAddingWrap1()
{
    wrap<5> b = 4;
    b += 4;
    return b == 3 && b + 4 == 7;
}

bool testSubtractWrap()
{
    wrap<5> a = 3;
    return 6 - a == 3;
}

bool testAddingWrap2()
{
    int a = 4;
    wrap<5> b = 4;
    a += b;
    return a == 8 && a + b == 12;
}

bool testWrapIncDec()
{
    wrap<5> a = 1;
    loop (12) ++a;
    loop (6) --a;
    return a == 2;
}

## error 2:21: error: Illegal types for binary operator '&' ('int32' and 'bool')

int x() { return 12 & 8 == 8; }

## error 2:26: error: Illegal types for binary operator '&' ('bool' and 'int32')

int x() { return 8 == 12 & 8; }

## error 2:19: error: Assignment is not allowed inside an expression

int x() { 1 + 3 = 4; }

## error 8:13: error: Expected a value

processor X
{
    output stream int out;

    void run()
    {
        out << 0x10 & 0x33;
        out << 0x02 | 0x20;
        out << 0x10 ^ 0x33;
        advance();
    }
}

## error 8:13: error: Expected a value

processor X
{
    output stream int out;

    void run()
    {
        out << 0x10 & 0x33 << 0x02 | 0x20 << 0x10 ^ 0x33;
        advance();
    }
}

## error 2:24: error: Found "++" when expecting identifier

void foo()  { int x; ++++x; }

## error 2:24: error: The '++' operator must be given an assignable variable

void foo()  { int x; ++x--; }

## error 2:29: error: The '--' operator must be given an assignable variable

void foo()  { int x; (x--)--; }

## error 2:25: error: Illegal type for the '++' operator

void foo()  { bool x; ++x; }

## error 2:26: error: Found "--" when expecting ";"

void foo()  { int x; x-- --; }

## error 2:24: error: The '++' operator must be given an assignable variable

void foo()  { int x; ++(++x); }

## error 2:38: error: The '+' operator can be applied to vector types, but not arrays

void foo()  { int[2] x, y; let z = x + y; }

## error 2:39: error: Illegal types for binary operator '+' ('bool' and 'bool')

void foo()  { bool b = true; b += true; }

## error 2:28: error: Illegal types for binary operator '/' ('bool' and 'bool')

void foo()  { let x = true / true; }

## error 2:38: error: Illegal types for binary operator '+' ('bool' and 'float32')

void foo()  { var b = 1.3f; b += true; }

## error 2:36: error: Cannot implicitly convert 'int32' to 'bool'

void foo()  { int b = 1; b &&= true; }

## error 2:39: error: Cannot implicitly convert 1.0 ('float64') to 'bool'

void foo()  { bool b = true; b &&= 1.0; }

## error 2:40: error: Illegal types for binary operator '^' ('bool' and 'bool')

void foo()  { bool b = true; b ^= false; }

## error 2:36: error: Illegal types for binary operator '/' ('bool' and 'int32')

void foo()  { int b = 1; b = false / b; }

## error 2:23: error: The '+' operator must be given an assignable variable

void foo() { bool += 2; }

## error 2:21: error: The '=' operator must be given an assignable variable

void foo() { bool = 3; }

## error 2:26: error: Expected a value

void foo() { int x; x += bool; }

## error 2:20: error: The '++' operator must be given an assignable variable

void foo() { bool++; }

## error 2:26: error: Expected a value

void foo() { int[2] a; a[bool]++; }

## error 2:31: error: Variables which have the ++ or -- operator applied can not be used twice within the same statement

void foo() { int n = 1; n+= ++n; }

## error 2:35: error: The in-place operator '"+="' must be used as a statement, not an expression

void foo() { int n = 1; let x = n += 2; }

## error 2:32: error: The in-place operator '"+="' must be used as a statement, not an expression

void foo() { int n = 1; n += n += 2; }

## error 2:39: error: The in-place operator '"+="' must be used as a statement, not an expression

void foo() { int a = 1, b = 1; a += b += 1; }

/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

## processor

processor HelloWorld
{
    output event string text;

    void run()
    {
        text << "Hello" << "World";
        loop advance();
    }
}

processor Checker
{
    output event int results;
    input event string text;

    int index, correctEvents;

    event text (string s)
    {
        if (index == 0 && s == "Hello")  ++correctEvents;
        if (index == 1 && s == "World")  ++correctEvents;

        ++index;
    }

    void run()
    {
        loop
        {
            if (correctEvents == 2)
                break;

            if (correctEvents != index)
            {
                results << 0;
                break;
            }

            results << 1;
            advance();
        }

        loop { results << -1; advance(); }
    }
}

graph test
{
    output event int results;

    connection HelloWorld.text -> Checker.text;
    connection Checker.results -> results;
}

## compile

processor testExtendedChars()
{
    // ðŸ˜€ðŸ˜€ðŸ˜€ extended chars allowed in comments
    output stream float32 output0;

    const float32[2] someData = (0.1f, 0.2f);

    let stringLiteral = "And allowed in strings ðŸ˜€ðŸ˜€ðŸ˜€";

    void run()
    {
        int32 index;
        output0 << someData.at (index);
        advance();
    }
}

## error 9:16: error: Unexpected character 'ðŸ˜€' in source

processor testExtendedChars()
{
    output stream float32 output0;

    const float32[2] someData = (0.1f, 0.2f);

    // But not allowed in variables
    float myVarðŸ˜€ = 1.0f;

    void run()
    {
        int32 index;
        output0 << someData.at (index);
        advance();
    }
}

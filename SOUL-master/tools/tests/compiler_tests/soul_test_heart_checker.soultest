/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

## error 3:1: error: A processor must declare at least one output
#SOUL 1

processor Test
{
  input audioIn stream float32;

  function run() -> void
  {
    @block_0:
      advance;
      return;
  }
}

## error 3:1: error: A processor must declare at least one output
#SOUL 1

processor gain [[ main: true ]]
{
  input audioIn stream  float32;

  function run() -> void
  {
    @block_0:
      advance;
      return;
  }
}

## error 3:1: error: A processor must declare at least one output
#SOUL 1

graph Test
{
  input audioIn stream float32;
}

## error 6:9: error: The name 'audioIn' is already in use
#SOUL 1

processor gain [[ main: true ]]
{
  input audioIn event float32;
  input audioIn stream float32;

  function run() -> void
  {
    @block_0:
      advance;
      return;
  }
}

## error 3:1: error: A processor must declare at least one output
#SOUL 1

graph test [[ main: true ]]
{
}

## error 6:10: error: The name 'audioIn' is already in use
#SOUL 1

processor gain [[ main: true ]]
{
  input audioIn event float32;
  output audioIn stream float32;

  function run() -> void
  {
    @block_0:
      advance;
      return;
  }
}

## error error: Cannot return reference type
#SOUL 1

processor gain [[ main: true ]]
{
  output audioIn stream float32;

  var int32 $i = 1;

  function run() -> void
  {
    @block_0:
      $j = call returnStateReference();
      $j = add ($j, 1);
      advance;
      return;
  }

  function returnStateReference() -> int32&
  {
    @block_0:
      return $i;
  }
}

## error error: Cannot return reference type
#SOUL 1

processor gain [[ main: true ]]
{
  output audioIn stream float32;

  function run() -> void
  {
    @block_0:
      $j = call returnLocalReference();
      $j = add ($j, 1);
      advance;
      return;
  }

  function returnLocalReference() -> int32&
  {
    @block_0:
      $i = 0;
      return $i;
  }
}

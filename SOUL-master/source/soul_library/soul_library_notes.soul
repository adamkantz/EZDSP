/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/** Title: Musical note utilities

    This module contains various structs which can be used to model note-control events
    coming from sources such as MIDI keyboards.

    The SOUL policy is to keep the use of actual MIDI to a minimum, so we encourage
    incoming MIDI data to be converted into these strongly-typed structures, and to use
    them internally, rather than attempting to work with MIDI bytes like it's the 1980s.
*/

/**
    This namespace contains some types which are handy for representing synthesiser
    note events. They do a similar job to MIDI events, but as strongly-typed structs
    instead of a group of bytes. Things like the midi::MPEParser class generate them.

    The events do contain a channel number, in the same way that MIDI does, but there
    are no restrictions on its range.
*/
namespace soul::note_events
{
    /// Represents a note-on (key-down) event.
    struct NoteOn
    {
        int channel;
        float note;
        float velocity;
    }

    /// Represents a note-off (key-up) event.
    struct NoteOff
    {
        int channel;
        float note;
        float velocity;
    }

    /// Represents a change to the pitch that should be applied to any notes
    /// being played on the channel specified.
    struct PitchBend
    {
        int channel;
        float bendSemitones;
    }

    /// Represents a change to the pressure that should be applied to any notes
    /// being played on the channel specified.
    struct Pressure
    {
        int channel;
        float pressure;
    }

    /// Represents a change to the Y-axis parameter that should be applied to any notes
    /// being played on the channel specified.
    struct Slide
    {
        int channel;
        float slide;
    }

    /// Represents a change to a user-defined control parameter that should be applied
    /// to any notes being played on the channel specified.
    struct Control
    {
        int channel;
        int control;
        float value;
    }
}

//==============================================================================
/**
    Simple voice allocation helpers, which take a single stream of input events,
    and redirect them to an array of target voice processors.
*/
namespace soul::voice_allocators (int mpeMasterChannel = 0)
{
    /** A simple voice-allocator which will find either an inactive voice, or the
        least-recently used active voice if it needs to steal one.
    */
    processor Basic (int voiceCount)  [[ main: false ]]
    {
        input event (soul::note_events::NoteOn,
                     soul::note_events::NoteOff,
                     soul::note_events::PitchBend,
                     soul::note_events::Pressure,
                     soul::note_events::Slide,
                     soul::note_events::Control) eventIn;

        output event (soul::note_events::NoteOn,
                      soul::note_events::NoteOff,
                      soul::note_events::PitchBend,
                      soul::note_events::Pressure,
                      soul::note_events::Slide,
                      soul::note_events::Control) voiceEventOut[voiceCount];

        event eventIn (soul::note_events::NoteOn e)
        {
            wrap<voiceCount> allocatedVoice = 0;
            var allocatedVoiceAge = voiceInfo[allocatedVoice].voiceAge;

            // Find the oldest voice to reuse
            for (int i = 1; i < voiceCount; ++i)
            {
                let age = voiceInfo.at(i).voiceAge;

                if (age < allocatedVoiceAge)
                {
                    allocatedVoiceAge = age;
                    allocatedVoice = wrap<voiceCount>(i);
                }
            }

            // If the voice was previously active, we're stealing it, so send a note off too
            if (voiceInfo[allocatedVoice].active)
            {
                soul::note_events::NoteOff noteOff;

                noteOff.channel = voiceInfo[allocatedVoice].channel;
                noteOff.note    = voiceInfo[allocatedVoice].note;

                voiceEventOut[allocatedVoice] << noteOff;
            }

            // Send the note on to the voice
            voiceEventOut[allocatedVoice] << e;

            // Update the VoiceInfo for our chosen voice
            voiceInfo[allocatedVoice].active       = true;
            voiceInfo[allocatedVoice].noteReleased = false;
            voiceInfo[allocatedVoice].channel      = e.channel;
            voiceInfo[allocatedVoice].note         = e.note;
            voiceInfo[allocatedVoice].voiceAge     = nextAllocatedVoiceAge++;
        }

        event eventIn (soul::note_events::NoteOff e)
        {
            // Release all voices associated with this note/channel
            wrap<voiceCount> voice = 0;

            bool pedalDown = masterSustainActive ? true : channelSustainActive.at (e.channel);

            loop (voiceCount)
            {
                if (voiceInfo[voice].channel == e.channel
                     && voiceInfo[voice].note == e.note)
                {
                    if (pedalDown)
                    {
                        // Mark the note as released
                        voiceInfo[voice].noteReleased = true;
                    }
                    else
                    {
                        // Mark the voice as being unused
                        voiceInfo[voice].active   = false;
                        voiceInfo[voice].voiceAge = nextUnallocatedVoiceAge++;

                        voiceEventOut[voice] << e;
                    }
                }

                ++voice;
            }
        }

        event eventIn (soul::note_events::PitchBend e)
        {
            // Forward the pitch bend to all notes on this channel
            wrap<voiceCount> voice = 0;

            loop (voiceCount)
            {
                if (voiceInfo[voice].channel == e.channel)
                    voiceEventOut[voice] << e;

                ++voice;
            }
        }

        event eventIn (soul::note_events::Pressure p)
        {
            // Forward the event to all notes on this channel
            wrap<voiceCount> voice = 0;

            loop (voiceCount)
            {
                if (voiceInfo[voice].channel == p.channel)
                    voiceEventOut[voice] << p;

                ++voice;
            }
        }

        event eventIn (soul::note_events::Slide s)
        {
            // Forward the event to all notes on this channel
            wrap<voiceCount> voice = 0;

            loop (voiceCount)
            {
                if (voiceInfo[voice].channel == s.channel)
                    voiceEventOut[voice] << s;

                ++voice;
            }
        }

        event eventIn (soul::note_events::Control c)
        {
            if (c.control == sustainCC)
            {
                bool pedalDown = c.value >= 0.5f;
                bool isMasterChannel = c.channel == mpeMasterChannel;

                channelSustainActive.at (c.channel) = pedalDown;

                if (isMasterChannel)
                    masterSustainActive = pedalDown;
                    
                if (! pedalDown)
                {
                    // Release any released notes for this channel
                    wrap<voiceCount> voice = 0;

                    loop (voiceCount)
                    {
                        if ((isMasterChannel || voiceInfo[voice].channel == c.channel) &&
                            voiceInfo[voice].active == true &&
                            voiceInfo[voice].noteReleased == true)
                        {
                            soul::note_events::NoteOff noteOff;

                            noteOff.channel = voiceInfo[voice].channel;
                            noteOff.note    = voiceInfo[voice].note;

                            voiceEventOut[voice] << noteOff;

                            voiceInfo[voice].active   = false;
                            voiceInfo[voice].voiceAge = nextUnallocatedVoiceAge++;
                        }

                        ++voice;
                    }
                }

                return;
            }

            // Forward the event to all notes on this channel
            wrap<voiceCount> voice = 0;

            loop (voiceCount)
            {
                if (voiceInfo[voice].channel == c.channel)
                    voiceEventOut[voice] << c;

                ++voice;
            }
        }

        struct VoiceInfo
        {
            bool active;
            int channel;
            float note;
            int voiceAge;
            bool noteReleased;
        }

        int nextAllocatedVoiceAge   = 1000000000;
        int nextUnallocatedVoiceAge = 1;

        let sustainCC = 64;

        VoiceInfo[voiceCount] voiceInfo;
        bool[16] channelSustainActive;
        bool masterSustainActive;
    }
}

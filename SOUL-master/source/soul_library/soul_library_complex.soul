/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

namespace soul::complex_lib::imp (using FloatType, int vectorSize)
{
    namespace complex_element = imp (FloatType, 1);

    struct ComplexType
    {
        FloatType<vectorSize> real, imag;
    }

    ComplexType negate (ComplexType v)
    {
        return ComplexType (-v.real, -v.imag);
    }

    ComplexType conj (ComplexType v)
    {
        return ComplexType (v.real, -v.imag);
    }

    ComplexType add (ComplexType left, ComplexType right)
    {
        return ComplexType (left.real + right.real,
                            left.imag + right.imag);
    }

    ComplexType subtract (ComplexType left, ComplexType right)
    {
        return ComplexType (left.real - right.real,
                            left.imag - right.imag);
    }

    ComplexType multiply (ComplexType left, ComplexType right)
    {
        return ComplexType (left.real * right.real - left.imag * right.imag,
                            left.real * right.imag + left.imag * right.real);
    }

    ComplexType divide (ComplexType left, ComplexType right)
    {
        let c = right.conj();
        let result = multiply (left, c);
        let scale = multiply (right, c).real;

        return ComplexType (result.real / scale,
                            result.imag / scale);
    }

    bool<vectorSize> equals (ComplexType left, ComplexType right)
    {
        var realComparison = left.real == right.real;
        let imagComparison = left.imag == right.imag;

        for (wrap<vectorSize> i)
            realComparison[i] = realComparison[i] && imagComparison[i];

        return realComparison;
    }

    bool<vectorSize> notEquals (ComplexType left, ComplexType right)
    {
        var r = equals (left, right);

        for (wrap<vectorSize> i)
            r[i] = ! r[i];

        return r;
    }

    complex_element::ComplexType getElement (ComplexType c, int element)
    {
        return complex_element::ComplexType (c.real.at (element),
                                            c.imag.at (element));
    }

    complex_element::ComplexType setElement (ComplexType& c, int element, complex_element::ComplexType value)
    {
        c.real.at (element) = value.real;
        c.imag.at (element) = value.imag;

        return value;
    }
}

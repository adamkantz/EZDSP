/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/** Title: Timeline event utilities

    The `timeline` namespace contains various structs and functions which are used when
    dealing with positions and tempos along a timeline.
*/

/// The `timeline` namespace contains various structs and functions which are used when
/// dealing with positions and tempos along a timeline.
namespace soul::timeline
{
    //==============================================================================
    /** Represents a simple time-signature. */
    struct TimeSignature
    {
        int numerator;     // The top number of a time-signature, e.g. the 3 of 3/4.
        int denominator;   // The bottom number of a time-signature, e.g. the 4 of 3/4.
    }

    //==============================================================================
    /** Represents a tempo in BPM. */
    struct Tempo
    {
        float bpm;  // beats per minute
    }

    //==============================================================================
    /** */
    float quarterNotesPerBeat (TimeSignature timeSig)                                       { return 4.0f / timeSig.denominator; }
    /** */
    float beatsPerQuarterNote (TimeSignature timeSig)                                       { return timeSig.denominator / 4.0f; }

    /** */
    float secondsPerBeat (Tempo tempo)                                                      { return tempo.bpm <= 0 ? 0.0f : (60.0f / tempo.bpm); }
    /** */
    float secondsPerQuarterNote (Tempo tempo, TimeSignature timeSig)                        { return tempo.secondsPerBeat() * timeSig.beatsPerQuarterNote(); }

    /** */
    float64 framesPerBeat (Tempo tempo, float64 sampleRate)                                 { return sampleRate * tempo.secondsPerBeat(); }
    /** */
    float64 framesPerQuarterNote (Tempo tempo, TimeSignature timeSig, float64 sampleRate)   { return sampleRate * tempo.secondsPerQuarterNote (timeSig); }

    //==============================================================================
    /** Represents the state of a host which can play timeline-based material. */
    struct TransportState
    {
        /** In the absence of enums, the valid values for the state are:
            0 = stopped, 1 = playing, 2 = recording.
        */
        int state;
    }

    /** */
    bool isStopped   (TransportState t)       { return t.state == 0; }
    /** */
    bool isPlaying   (TransportState t)       { return t.state == 1; }
    /** */
    bool isRecording (TransportState t)       { return t.state == 2; }

    //==============================================================================
    /** Represents a position along a timeline, in terms of frames and also (where
        appropriate) quarter notes.
    */
    struct Position
    {
        /** A number of frames from the start of the timeline. */
        int64 currentFrame;

        /** The number of quarter-notes since the beginning of the timeline.
            A host may not have a meaningful value for this, so it may just be 0.
            Bear in mind that a timeline may contain multiple changes of tempo and
            time-signature, so this value will not necessarily keep increasing at
            a constant rate.
        */
        float64 currentQuarterNote;

        /** The number of quarter-notes from the beginning of the timeline to the
            start of the current bar.
            A host may not have a meaningful value for this, so it may just be 0.
            You can subtract this from currentQuarterNote to find out how which
            quarter-note the position represents within the current bar.
        */
        float64 lastBarStartQuarterNote;
    }
}

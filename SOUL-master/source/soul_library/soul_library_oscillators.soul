/*
    _____ _____ _____ __
   |   __|     |  |  |  |      The SOUL language
   |__   |  |  |  |  |  |__    Copyright (c) 2019 - ROLI Ltd.
   |_____|_____|_____|_____|

   The code in this file is provided under the terms of the ISC license:

   Permission to use, copy, modify, and/or distribute this software for any purpose
   with or without fee is hereby granted, provided that the above copyright notice and
   this permission notice appear in all copies.

   THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
   TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN
   NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
   IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

/** Title: Oscillators

    This module contains a collection of oscillator algorithms for generating
    various wave-shapes. The collection covers low frequency designs and high quality alias
    free algotithms.
*/

/**
    The `oscillators` namespace is parameterised with a `SampleType` and `PhaseType`. The `SampleType` specifies
    the output type, and can be either `float32` or `float64`. The `PhaseType` is used internally to track
    phase position, so higher resolution data types can be used to reduce frequency inaccuracy for very critical
    applications.

    By default the `SampleType` and `PhaseType` are float32.
*/
namespace soul::oscillators (using SampleType = float32,
                             using PhaseType  = float32)
{
    static_assert (SampleType.isFloat, "The SampleType must be a float");
    static_assert (PhaseType.isFloat && ! PhaseType.isVector, "The PhaseType must be a float");

    let minFreqHz = 0.0f;
    let maxFreqHz = 22000.0f;
    let defaultFreqHz = 1000.0f;

    //==============================================================================
    /// A unipolar ramp (phasor) oscillator.
    /// This is a non-bandlimited oscillator that will cause aliasing, but is used internally by the BLEP oscillator.
    namespace phasor
    {
        struct State
        {
            /// The phase uses a range 0 to 1.0
            PhaseType phase;
            /// The increment of phase per frame
            PhaseType phaseIncrement;
        }

        /// Resets a phasor::State object
        void reset (State& s)
        {
            s.phase = PhaseType();
        }

        /// Updates a phasor::State object for a new rate
        void update (State& s, float64 samplePeriod, float64 freqHz)
        {
            s.phaseIncrement = PhaseType (samplePeriod * freqHz);
        }

        /// Increments a phasor::State object and returns the new phase
        PhaseType process (State& s)
        {
            s.phase += s.phaseIncrement;

            while (s.phase >= PhaseType (1))
                s.phase -= PhaseType (1);

            return s.phase;
        }

        /// A processor that produces a stream of phase values as its output.
        processor Processor (float initialFrequency = 1000)
        {
            output stream SampleType out;
            input event float frequencyIn [[ name: "Frequency", min: minFreqHz, max: maxFreqHz, init: defaultFreqHz, unit: "Hz" ]];
            event frequencyIn (float v) { s.update (processor.period, v); }

            State s;

            void init()
            {
                s.update (processor.period, initialFrequency);
            }

            void run()
            {
                loop
                {
                    out << SampleType (s.process());
                    advance();
                }
            }
        }
    }

    //==============================================================================
    /// A simple sinewave oscillator which receives input events to control its frequency.
    processor Sine (float initialFrequency = 1000)
    {
        output stream SampleType out;
        input event float frequencyIn  [[ name: "Frequency", min: minFreqHz, max: maxFreqHz, init: defaultFreqHz, unit: "Hz" ]];
        event frequencyIn (float v) { phaseIncrement = float (v * twoPi * processor.period); }

        var phaseIncrement = float (initialFrequency * twoPi * processor.period);

        void run()
        {
            float phase;

            loop
            {
                out << sin (phase);
                phase = addModulo2Pi (phase, phaseIncrement);
                advance();
            }
        }
    }

    //==============================================================================
    /// A semi band-limited oscillator with sawtooth, square and triangle wave shapes
    /// using the PolyBLEP (Polynomial Band-Limited Step) technique.
    /// You may want to oversample this oscillator, in order to reduce aliasing.
    ///
    namespace poly_blep
    {
        /// Contains different wave-shaping functions.
        namespace shapers
        {
            /// Generates a polyblep
            PhaseType polyblep (PhaseType phase, PhaseType phaseIncrement)
            {
                if (phase < phaseIncrement)
                {
                    phase /= phaseIncrement;
                    return (phase + phase) - (phase * phase) - PhaseType (1);
                }

                if (phase > PhaseType (1) - phaseIncrement)
                {
                    phase = (phase - PhaseType (1)) / phaseIncrement;
                    return (phase * phase) + (phase + phase) + PhaseType (1);
                }

                return PhaseType (0);
            }

            /// Generates a sawtooth wave from a phasor state
            PhaseType sawtooth (phasor::State& s)
            {
                return PhaseType (-1) + (PhaseType (2) * s.phase) - polyblep (s.phase, s.phaseIncrement);
            }

            /// Generates a square wave from a phasor state
            PhaseType square (phasor::State& s)
            {
                return (s.phase < PhaseType (0.5) ? PhaseType (-1) : PhaseType (1))
                        - polyblep (s.phase, s.phaseIncrement)
                        + polyblep (fmod (s.phase + PhaseType (0.5), PhaseType (1)), s.phaseIncrement);
            }
        }

        /// Contains constants for different wave-shapes
        namespace Shape
        {
            let sawtooth = 0;
            let triangle = 1;
            let square   = 2;
        }

        /// A processor which generates a dynamically adjustable wave-shape.
        processor Processor (int initialShape = 0,
                            float initialFrequency = 1000)
        {
            output stream SampleType out;
            input event float shapeIn       [[ name: "Shape",     min: 0,         max: 2,         init: 0,    text: "Sawtooth|Triangle|Square"]];
            input event float frequencyIn   [[ name: "Frequency", min: minFreqHz, max: maxFreqHz, init: defaultFreqHz, unit: "Hz"]];

            event shapeIn (float v)        { shape = wrap<3> (floor (v)); }
            event frequencyIn (float v)    { s.update (processor.period, v); }

            phasor::State s;
            var shape = wrap<3> (initialShape);

            void init()
            {
                s.update (processor.period, initialFrequency);
            }

            void run()
            {
                PhaseType y = PhaseType (0);
                PhaseType triAccumulator = PhaseType (0);

                loop
                {
                    if (shape == Shape::sawtooth)
                    {
                        y = shapers::sawtooth (s);
                    }
                    else if (shape == Shape::triangle)
                    {
                        // leaky integrator
                        let coefficient = PhaseType (1.0 - (0.25 * s.phaseIncrement));
                        triAccumulator = s.phaseIncrement * shapers::square (s) + coefficient * triAccumulator;
                        y = triAccumulator * PhaseType (4);
                    }
                    else if (shape == Shape::square)
                    {
                        y = shapers::square (s);
                    }

                    s.process();

                    out << SampleType (y);

                    advance();
                }
            }
        }
    }

    //==============================================================================
    /// A quadrature sinusoidal oscillator producing sine and cosine outputs simultaneously.
    /// The `updateInterval` defines the samples between updates to the frequency taking effect.
    /// https://vicanek.de/articles/QuadOsc.pdf
    ///
    namespace quadrature (int updateInterval = 16)
    {
        struct State
        {
            SampleType u, v;
        }

        struct Coeffs
        {
            SampleType k1, k2;
        }

        /// Resets a quadrature::State object.
        void reset (State& s)
        {
            s.u = SampleType (1);
            s.v = SampleType();
        }

        /// Updates a quadrature::State object for a new rate.
        void update (Coeffs& c, float64 freqHz, float64 sampleRate)
        {
            let w = twoPi * (freqHz / sampleRate);
            c.k1 = SampleType (tan (0.5 * w));
            c.k2 = SampleType (2.0 * c.k1 / (1.0 + c.k1 * c.k1));
        }

        /// Generates the next samples for a quadrature::State object.
        SampleType[2] process (State& s, Coeffs& c)
        {
            let tmp = s.u - c.k1 * s.v;
            s.v = s.v + c.k2 * tmp;
            s.u = tmp - c.k1 * s.v;
            return SampleType[2] (s.v, s.u);
        }

        /// A processor that generates a pair of sine/cosine output streams.
        processor Processor (float initialFrequency = 1000)
        {
            output stream SampleType sineOut;
            output stream SampleType cosineOut;

            input event float frequencyIn [[ name: "Frequency", min: -maxFreqHz, max: maxFreqHz, init: 0.0, unit: "Hz"]]; // Default meta data allows negative frequencies

            event frequencyIn (float v) { frequency = v; recalc = true; }

            float frequency  = initialFrequency;
            bool  recalc     = true;

            void run()
            {
                State s;
                Coeffs c;

                s.reset();

                loop
                {
                    if (recalc)
                    {
                        recalc = false;
                        c.update (frequency, processor.frequency);
                    }

                    loop (updateInterval)
                    {
                        let y = s.process (c);
                        sineOut << y[0];
                        cosineOut << y[1];
                        advance();
                    }
                }
            }
        }
    }

    //==============================================================================
    ///
    /// A tempo-syncable LFO with some common shapes and options for uni-polar or bi-polar output.
    /// Unipolar LFO shapes run between 0 and 1, whilst Bipolar run between -1 and 1.
    ///
    namespace lfo
    {
        /// Various LFO shape generator functions.
        namespace shapers
        {
            SampleType rampUp           (PhaseType phase) { return (phase * 2.0f) - 1.0f; }
            SampleType rampUpUnipolar   (PhaseType phase) { return phase; }
            SampleType rampDown         (PhaseType phase) { return ((1.0f - phase) * 2.0f) - 1.0f; }
            SampleType rampDownUnipolar (PhaseType phase) { return (1.0f - phase); }
            SampleType triangle         (PhaseType phase) { return (2.0f * (1.0f - abs ((wrap (phase + 0.25f, 1.0f) * 2.0f) -1.0f))) - 1.0f; }
            SampleType triangleUnipolar (PhaseType phase) { return 1.0f - abs((phase * 2.0f) - 1.0f ); }
            SampleType square           (PhaseType phase) { return (float (phase > 0.5f) * 2.0f) - 1.0f; }
            SampleType squareUnipolar   (PhaseType phase) { return float (phase > 0.5f); }
            SampleType sine             (PhaseType phase) { return sin (phase * float32 (twoPi)); }
            SampleType sineUnipolar     (PhaseType phase) { return (sin (phase * float32 (twoPi)) + 1.0f) * 0.5f; }
        }

        /// A set of constants to specify different LFO shapes.
        namespace Shape
        {
            let triangle      = 0;
            let square        = 1;
            let rampUp        = 2;
            let rampDown      = 3;
            let sine          = 4;
            let sampleAndHold = 5;
        }

        /// Polarity control constants.
        namespace Polarity
        {
            let unipolar = 0;
            let bipolar  = 1;
        }

        /// A processor which implements an LFO with events to control its parameters.
        /// Changes to the frequency and depth are smoothed, but expect discontinuities if the shape or polarity
        /// are updated.
        processor Processor (int initialShape = 0,
                             int initialPolarity = 0,
                             float initialDepth = 1.0f,
                             float initialFrequency = 1.0f)
        {
            output stream SampleType out;

            input event
            {
                soul::timeline::Position positionIn;
                soul::timeline::TransportState transportStateIn;
                soul::timeline::Tempo tempoIn;

                float rateHzIn     [[ name: "Rate (Hz)",     min: 0.01,  max: 40.0,   init: 1.,   unit: "hz", step: 0.01 ]];
                float rateTempoIn  [[ name: "Rate (Beats)",  min: 0.001, max: 32,     init: 0,    unit: "beat", step: 0.001]];
                float depthIn      [[ name: "Depth",         min: 0,     max: 100,    init: 100,  unit: "%",  step: 1 ]];
                float shapeIn      [[ name: "Shape",         min: 0,     max: 5,      init: 0,    text: "Triangle|Square|Ramp Up|Ramp Down|Sine|Sample & Hold"]];
                float polarityIn   [[ name: "Polarity",      min: 0,     max: 1,      init: 0,    text: "Unipolar|Bipolar"]];
                float rateModeIn   [[ name: "Rate Mode",     min: 0,     max: 1,      init: 0,    text: "Hz|Tempo"]];
                float syncIn       [[ name: "Timeline Sync", min: 0,     max: 1,      init: 0,    text: "Off|On"]];
            }

            event positionIn (soul::timeline::Position v)             { qnPos = v.currentQuarterNote; }
            event transportStateIn (soul::timeline::TransportState v) { transportRunning = v.state > 0; }
            event tempoIn (soul::timeline::Tempo v)                   { qnPhaseIncrement = (v.bpm / 60.0f) * float (processor.period); }

            event rateHzIn (float v)
            {
                if (! qnMode)
                    phaseIncrement = PhaseType (v * processor.period);
            }

            event rateTempoIn (float v)   { qnScalar = v; }
            event depthIn (float v)       { depth.setTarget (v * 0.01f, smoothingSamples); }
            event shapeIn (float v)       { shape = int (floor (v)); }
            event polarityIn (float v)    { polarity = (v < 0.5f) ? Polarity::unipolar : Polarity::bipolar; }
            event rateModeIn (float v)    { qnMode = v > 0.5f; }
            event syncIn (float v)        { timelineSync = v > 0.5f; }

            PhaseType phase;
            var phaseIncrement = float32 (initialFrequency * processor.period);
            int shape = initialShape;
            int polarity = initialPolarity;
            smoother::State depth;

            let smoothingSamples = int (float (processor.frequency) * 0.02f);
            bool transportRunning = false;
            bool qnMode = false;
            bool timelineSync = false;
            float64 qnScalar = 1.0;
            float64 qnPos = 0.0;
            float32 qnPhaseIncrement = (120.0f / 60.0f) * (1.0f / 44100.0f); // Default = 1qn @ 120bpm / 44.1 sr

            PhaseType prevPhase = 1.0f;
            soul::random::RandomNumberState rng;
            SampleType noiseSample;

            SampleType getNoiseSample()
            {
                if (phase < prevPhase)
                    noiseSample = SampleType (polarity == Polarity::bipolar ? rng.getNextBipolar()
                                                                            : rng.getNextUnipolar());

                prevPhase = phase;
                return noiseSample;
            }

            SampleType getNextSample()
            {
                if (polarity == Polarity::bipolar)
                {
                    if (shape == Shape::triangle)      return shapers::triangle (phase);
                    if (shape == Shape::square)        return shapers::square (phase);
                    if (shape == Shape::rampUp)        return shapers::rampUp (phase);
                    if (shape == Shape::rampDown)      return shapers::rampDown (phase);
                    if (shape == Shape::sine)          return shapers::sine (phase);
                    if (shape == Shape::sampleAndHold) return getNoiseSample();
                }
                else
                {
                    if (shape == Shape::triangle)      return shapers::triangleUnipolar (phase);
                    if (shape == Shape::square)        return shapers::squareUnipolar (phase);
                    if (shape == Shape::rampUp)        return shapers::rampUpUnipolar (phase);
                    if (shape == Shape::rampDown)      return shapers::rampDownUnipolar (phase);
                    if (shape == Shape::sine)          return shapers::sineUnipolar (phase);
                    if (shape == Shape::sampleAndHold) return getNoiseSample();
                }

                return SampleType();
            }

            void init()
            {
                depth.reset (initialDepth * 0.01f);
            }

            void run()
            {
                rng.reset (processor.id + 10);

                loop
                {
                    out << getNextSample() * depth.tick();

                    if (qnMode)
                    {
                        if (timelineSync && transportRunning)
                        {
                            let oneOverQNScalar = 1.0 / qnScalar;
                            qnPos += qnPhaseIncrement;
                            phase = float32 (fmod (qnPos, oneOverQNScalar) / oneOverQNScalar);
                        }
                        else // freewheel
                        {
                            phase += (qnPhaseIncrement * float32 (qnScalar));

                            while (phase >= 1.0f)
                                phase -= 1.0f;
                        }
                    }
                    else
                    {
                        phase += phaseIncrement;

                        while (phase >= 1.0f)
                            phase -= 1.0f;
                    }

                    advance();
                }
            }
        }
    }
}
